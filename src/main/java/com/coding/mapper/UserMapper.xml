<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.coding.mapper.UserMapper">

    <!--根据用户ID 删除用户信息-->
    <delete id="deleteUserByPrimaryKey" parameterType="java.lang.String">
        delete from user
        where user_uuid = #{userUuid,jdbcType=VARCHAR}
    </delete>


    <!--增加用户信息-->
    <insert id="insertUser" parameterType="com.coding.pojo.User">
        insert into user (user_uuid, user_phone, user_nickname,
        user_password, user_email, user_name,
        user_age, user_sex, user_register_date_time,
        user_score, user_group, user_land_number,
        user_current_time, user_land_ip, user_address,
        <!--user2, user3, user4,
        user5, user6, user7,
        user8, user9, user10, -->
        user_healthy)
        values (#{userUuid,jdbcType=VARCHAR}, #{userPhone,jdbcType=VARCHAR}, #{userNickname,jdbcType=VARCHAR},
        #{userPassword,jdbcType=VARCHAR}, #{userEmail,jdbcType=VARCHAR}, #{userName,jdbcType=VARCHAR},
        #{userAge,jdbcType=INTEGER}, #{userSex,jdbcType=VARCHAR}, #{userRegisterDateTime,jdbcType=TIMESTAMP},
        #{userScore,jdbcType=INTEGER}, #{userGroup,jdbcType=INTEGER}, #{userLandNumber,jdbcType=INTEGER},
        #{userCurrentTime,jdbcType=TIMESTAMP}, #{userLandIp,jdbcType=VARCHAR}, #{userAddress,jdbcType=INTEGER},
        <!--#{user2,jdbcType=VARCHAR}, #{user3,jdbcType=VARCHAR}, #{user4,jdbcType=VARCHAR},
        #{user5,jdbcType=VARCHAR}, #{user6,jdbcType=VARCHAR}, #{user7,jdbcType=VARCHAR},
        #{user8,jdbcType=VARCHAR}, #{user9,jdbcType=VARCHAR}, #{user10,jdbcType=VARCHAR},-->
        #{userHealthy,jdbcType=LONGVARCHAR})
    </insert>

    <!--封装 User 类-->
    <resultMap id="BaseResultMap" type="com.coding.pojo.User">
        <id column="user_uuid" property="userUuid" jdbcType="VARCHAR"/>
        <result column="user_phone" property="userPhone" jdbcType="VARCHAR"/>
        <result column="user_nickname" property="userNickname" jdbcType="VARCHAR"/>
        <result column="user_password" property="userPassword" jdbcType="VARCHAR"/>
        <result column="user_email" property="userEmail" jdbcType="VARCHAR"/>
        <result column="user_name" property="userName" jdbcType="VARCHAR"/>
        <result column="user_age" property="userAge" jdbcType="INTEGER"/>
        <result column="user_sex" property="userSex" jdbcType="VARCHAR"/>
        <result column="user_register_date_time" property="userRegisterDateTime" jdbcType="TIMESTAMP"/>
        <result column="user_score" property="userScore" jdbcType="INTEGER"/>
        <result column="user_group" property="userGroup" jdbcType="INTEGER"/>
        <result column="user_land_number" property="userLandNumber" jdbcType="INTEGER"/>
        <result column="user_current_time" property="userCurrentTime" jdbcType="TIMESTAMP"/>
        <result column="user_land_ip" property="userLandIp" jdbcType="VARCHAR"/>
        <result column="user_address" property="userAddress" jdbcType="INTEGER"/>
        <!--<result column="user2" property="user2" jdbcType="VARCHAR" />
        <result column="user3" property="user3" jdbcType="VARCHAR" />
        <result column="user4" property="user4" jdbcType="VARCHAR" />
        <result column="user5" property="user5" jdbcType="VARCHAR" />
        <result column="user6" property="user6" jdbcType="VARCHAR" />
        <result column="user7" property="user7" jdbcType="VARCHAR" />
        <result column="user8" property="user8" jdbcType="VARCHAR" />
        <result column="user9" property="user9" jdbcType="VARCHAR" />
        <result column="user10" property="user10" jdbcType="VARCHAR" />-->
    </resultMap>
    <!--封装 User 类中的大文本类型-->
    <resultMap id="ResultMapWithBLOBs" type="com.coding.pojo.User" extends="BaseResultMap">
        <result column="user_healthy" property="userHealthy" jdbcType="LONGVARCHAR"/>
    </resultMap>
    <sql id="Base_Column_List">
        user_uuid, user_phone, user_nickname, user_password, user_email, user_name, user_age,
        user_sex, user_register_date_time, user_score, user_group, user_land_number, user_current_time,
        user_land_ip, user_address
    </sql>
    <sql id="Blob_Column_List">
        user_healthy
    </sql>
    <!--根据用户ID查询用户信息-->
    <select id="selectUserByPrimaryKey" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
        <if test="userUuid!=null and userUuid!=''">
            select
            <include refid="Base_Column_List"/>
            ,
            <include refid="Blob_Column_List"/>
            from user
            where user_uuid = #{userUuid,jdbcType=VARCHAR}
        </if>
        <if test="userUuid==null or userUuid==''">
            select user10 from user order by user_uuid DESC limit 1
        </if>
    </select>

    <!--根据用户ID更新用户信息-->
    <update id="updateUserByPrimaryKey" parameterType="com.coding.pojo.User">
        update user
        set user_phone = #{userPhone,jdbcType=VARCHAR},
        user_nickname = #{userNickname,jdbcType=VARCHAR},
        user_password = #{userPassword,jdbcType=VARCHAR},
        user_email = #{userEmail,jdbcType=VARCHAR},
        user_name = #{userName,jdbcType=VARCHAR},
        user_age = #{userAge,jdbcType=INTEGER},
        user_sex = #{userSex,jdbcType=VARCHAR},
        user_register_date_time = #{userRegisterDateTime,jdbcType=TIMESTAMP},
        user_score = #{userScore,jdbcType=INTEGER},
        user_group = #{userGroup,jdbcType=INTEGER},
        user_land_number = #{userLandNumber,jdbcType=INTEGER},
        user_current_time = #{userCurrentTime,jdbcType=TIMESTAMP},
        user_land_ip = #{userLandIp,jdbcType=VARCHAR},
        user_address = #{userAddress,jdbcType=INTEGER},
        <!--user2 = #{user2,jdbcType=VARCHAR},
        user3 = #{user3,jdbcType=VARCHAR},
        user4 = #{user4,jdbcType=VARCHAR},
        user5 = #{user5,jdbcType=VARCHAR},
        user6 = #{user6,jdbcType=VARCHAR},
        user7 = #{user7,jdbcType=VARCHAR},
        user8 = #{user8,jdbcType=VARCHAR},
        user9 = #{user9,jdbcType=VARCHAR},
        user10 = #{user10,jdbcType=VARCHAR},-->
        user_healthy = #{userHealthy,jdbcType=LONGVARCHAR}
        where user_uuid = #{userUuid,jdbcType=VARCHAR}
    </update>

    <!--查询所有用户信息-->
    <select id="selectUserAll" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from user
    </select>

    <!--通过电话查找用户信息-->
    <select id="selectUserByPhone" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from user
        where user_phone = #{userPhone}
    </select>

    <!--通过电话查找用户密码-->
    <select id="selectUserPassword" parameterType="java.lang.String" resultType="java.lang.String">
        select
        user_password
        from user
        where user_phone = #{userPhone}
    </select>

    <!--根据组别ID查找用户信息-->
    <select id="selectUserByGroupId" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from user
        where user_group = #{user_group}
    </select>

    <!--根据积分范围查找用户信息-->
    <select id="selectUserByScoreRange" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from user
        where user_score between #{former} and #{latter};
    </select>

    <!---->
    <select id="selectUserByAgeRange" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from user
        where user_age between #{former} and #{latter};
    </select>

    <!--根据用户ID批量删除用户信息-->
    <delete id="deleteUsersByUuidArray" parameterType="java.lang.String">
        delete from user where user_uuid IN
        <foreach collection="user_uuidArray" item="user" open="(" separator="," close=")">
            #{user}
        </foreach>
    </delete>

    <!--分页查询所有用户-->
    <select id="selectUserAllPaging" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from user limit #{nowPage},#{number}
    </select>


    <!--根据关键字查询用户信息并按照字段排序-->
    <select id="selectUserPagingByKeyWord" parameterType="com.coding.pojo.PagingCustomUser"
            resultMap="ResultMapWithBLOBs">

        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from user
        <where>
            <!--模糊查询-->
            <if test="keyWord!=null and keyWord!=''">
                and user_name REGEXP #{keyWord}
            </if>
            <!--用户属性进行查询，得 user 不为null前提-->
            <if test="user != null">
                <!--性别查询-->
                <if test="user.userSex != null and user.userSex != ''">
                    and user_sex = #{user.userSex}
                </if>
                <!--组别查询-->
                <if test="user.userGroup != null and user.userGroup != 0">
                    and user_group = #{user.userGroup}
                </if>
            </if>
            <!--年龄范围查询-->
            <if test="formerAge == null or formerAge == 0">
                <if test="latterAge != null and latterAge != 0">
                    and user_age &lt; #{latterAge}
                </if>
            </if>
            <if test="formerAge != null " >
                <if test="latterAge == null or latterAge == 0">
                    and user_age  &gt; #{formerAge}
                </if>
                <if test="latterAge != null or latterAge != 0">
                    <if test="formerAge &lt; latterAge">
                        and user_age BETWEEN #{formerAge} and #{latterAge}
                    </if>
                    <if test="formerAge &gt; latterAge">
                        and user_age BETWEEN #{latterAge} and #{formerAge}
                    </if>
                    <if test="formerAge == latterAge">
                        and user_age = #{latterAge}
                    </if>
                </if>
            </if>

            <!--积分查询-->
            <if test="formerScore != null">
                <!--有最大值和最小值-->
                <if test="latterScore != null ">
                    <if test="formerScore &lt;latterScore ">
                        and user_score BETWEEN #{formerScore} and #{latterScore}
                    </if>
                    <if test="formerScore &gt;latterScore ">
                        and user_score BETWEEN #{latterScore} and #{formerScore}
                    </if>
                    <if test="formerScore == latterScore ">
                        and user_score = #{latterScore}
                    </if>
                </if>
                <!--只有最小值-->
                <if test="latterScore == null">
                    and user_score &gt;= #{formerScore}
                </if>
            </if>
            <!--只有最大值-->
            <if test="formerScore == null">
                <if test="latterScore != null and latterScore != 0">
                    and user_score &lt;= #{latterScore}
                </if>
            </if>

            <!--排序规则-->
            <if test="sortByColumn != null and sortByColumn !=''">
                <if test="sortRule != null and sortRule != ''">
                    order by ${sortByColumn} ${sortRule}
                </if>
            </if>
            <!--分页-->
            <if test="indexNumber != null">
                <if test="pageNumber != null and pageNumber != 0">
                    limit #{indexNumber},#{pageNumber}
                </if>
            </if>
            <if test="indexNumber == null">
                <if test="pageNumber != null and pageNumber != 0">
                    limit 0,#{pageNumber}
                </if>
            </if>
        </where>
    </select>

    <!--查询用户表中一共有多少数据-->
    <select id="selectUserCount" resultType="java.lang.Integer">
        select count(*) from user
    </select>
</mapper>